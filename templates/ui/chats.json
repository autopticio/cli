[
    {
        "title": "PQL Introduction",
        "system": "All answers must generate a single PQL program. Always answer with a single PQL (performance query language) program with 50 lines or less. When generating comments use // and NOT # . Do not summarize or explain just output the completed code. The answer is always a code snippet.",
        "question": "What is PQL and how is it used?",
        "answer": "PQL stands for Performance Query Language. It's a specialized query language designed for efficient analysis and querying of performance metrics, particularly for time series data in cloud monitoring and observability tools. PQL simplifies extracting and visualizing performance insights, making it easier to monitor and analyze infrastructure and application performance data.",
        "model": "pql:latest",
        "temperature": 0.15
    },
    {
        "title": "EC2 utilization",
        "system": "All answers must generate a single PQL program. Always answer with a single PQL (performance query language) program with 50 lines or less. When generating comments use // and NOT # . Do not summarize or explain just output the completed code. The answer is always a code snippet.",
        "question": "Query CPU utilization data across multiple AWS accounts and regions for EC2 instances over a six-hour period, aggregating metrics from various regions into a single, averaged time series to analyze CPU performance patterns.Visualize and analyze EC2 instance CPU utilization, sorting instances by average usage, highlighting the most and least utilized instances, and identifying periods of highest and lowest usage as well as the overall CPU volatility index based on percentile distance.",
        "answer": "//Query multiple aws accounts and regions\nwhere(@cw_aws)\n.what(\"MetricName='CPUUtilization';InstanceId='*';Region='eu-*|us-*';Namespace='AWS/EC2'\")\n.when(6h)\n.window(15m)\n    .request($where[0];$what[0];$when[0];$window[0]).as($cpus)\n\n//Aggregate CPU data across accounts and regions the into a single time series\n.merge($cpus; average).as($cpus_ts)\n\n//Get the averages for each instance and sort the set\n.average($cpus).as($cpu_instance_avg)\n.sort($cpu_instance_avg; 0).as($sorted_desc)\n\n .note(\"Aggregate CPU utilization\")\n    .chart($cpus_ts;@line)\n\n.note(\"EC2 instance utilization\")\n    .head($sorted_desc;3).as($top_instances; description='Most utilized instances')\n    .tail($sorted_desc;3).as($bottom_instances ; description='Least utilized instances')\n    .chart($top_instances;@piestack)\n    .chart($bottom_instances;@piestack)\n\n.note(\"CPU Utilization per instance\")\n   .chart($cpus;@line)\n\n\n//Slice the time series and get the lowest/highest value samples\n.note(\"Periods with highest and lowest CPU utilization across accounts and regions\")    \n    .sort($cpus_ts; 0).as($sorted)\n    .head($sorted; 3%).as($high_times)\n    .tail($sorted; 3%).as($low_times)\n    .chart($high_times;$low_times;@bar)\n\n.note(\"CPU volatility index for this period\")\n    //Compute the volatility is computed based on percentile distance to median\n    .percentile($cpus_ts;0.99).as($cpus_perc)\n    .percentile($cpus_ts;0.50).as($cpus_med)\n    .math((1-$cpus_med/$cpus_perc)*100).as($volatility_index)\n    .chart($volatility_index;@bar)",
        "model": "pql:latest",
        "temperature": 0.15
    },
    {
        "title": "S3 utilization",
        "system": "All answers must generate a single PQL program. Always answer with a single PQL (performance query language) program with 50 lines or less. When generating comments use // and NOT # . Do not summarize or explain just output the completed code. The answer is always a code snippet.",
        "question": "Retrieve the latest metrics for S3 bucket sizes and object counts in all US and EU regions, measured over the past 3 days with a 1-day window, to find the top 5 buckets by size and object count.Visualize S3 bucket size and object count metrics, highlighting the top buckets by size and count with pie charts and showing time series trends for size and object count.",
        "answer":"where(@cw_aws)\n.what(\n    \"MetricName='BucketSizeBytes';BucketName='*';Namespace='AWS/S3';Region='us-*|eu-*'\";\n    \"MetricName='NumberOfObjects';BucketName='*';Namespace='AWS/S3';Region='us-*|eu-*'\"\n    )\n.when(3d)\n.window(1d)\n.request($where[0] ; $what[0] ; $when[0] ; $window[0]).as($size)\n.request($where[0] ; $what[1] ; $when[0] ; $window[0]).as($count)\n\n//Use the latest values as we are ranking by the current state of metrics\n.tail($size;1).as($last_size_sample).average($last_size_sample).as($latest_size)\n.tail($count;1).as($last_count_sample).average($last_count_sample).as($latest_count)\n\n//get the top buckets by size and count\n.head($latest_size;5).as($top5_by_size)\n.head($latest_count;5).as($top5_by_count)\n\n//print a note in markdown and chart the aggregates and the time series\n.note(\"## S3 - buckets and objects\")\n.chart($top5_by_size;@piestack)\n.chart($top5_by_count;@piestack)\n.chart($count;@line)\n.chart($size;@line)",
        "model": "pql:latest",
        "temperature": 0.15
    },
    {
        "title": "Lambda performance",
        "system": "All answers must generate a single PQL program. Always answer with a single PQL (performance query language) program with 50 lines or less. When generating comments use // and NOT # . Do not summarize or explain just output the completed code. The answer is always a code snippet.",
        "question": "Retrieve and analyze AWS Lambda metrics, including concurrency, execution duration, errors, throttles, and invocations, over the past 6 hours with 15-minute intervals. Visualize the top functions by errors, invocations, duration, and throttles, along with concurrency metrics in bar and line charts. Generate a dashboard displaying AWS Lambda performance metrics, highlighting key functions with the highest averages in errors, invocations, and execution duration, along with concurrency comparisons using stacked and line charts.",
        "answer": "where(@cw_aws)\n\n.what(\n    \"MetricName='ClaimedAccountConcurrency';Stat='Maximum';Namespace='AWS/Lambda';Region='eu-*|us-*'\";\n    \"MetricName='UnreservedConcurrentExecutions';Stat='Maximum';Namespace='AWS/Lambda';Region='eu-*|us-*'\";\n    \"MetricName='Duration';FunctionName='*';Resource='*';Stat='Average';Namespace='AWS/Lambda';Region='eu-*|us-*'\";\n    \"MetricName='Errors';FunctionName='*';Resource='*';Stat='Sum';Namespace='AWS/Lambda';Region='eu-*|us-*'\";\n    \"MetricName='Throttles';FunctionName='*';Resource='*';Stat='Maximum';Namespace='AWS/Lambda';Region='eu-*|us-*'\";\n    \"MetricName='Invocations';FunctionName='*';Resource='*';Stat='Sum';Namespace='AWS/Lambda';Region='eu-*|us-*'\";\n    \"MetricName='ConcurrentExecutions';FunctionName='*';Resource='*';Stat='Maximum';Namespace='AWS/Lambda';Region='eu-*|us-*'\"\n    )\n.when(6h)\n.window(15m)\n.request($where[0] ; $what[0] ; $when[0] ; $window[0]).as($ClaimedAccountConcurrency)\n.request($where[0] ; $what[1] ; $when[0] ; $window[0]).as($UnreservedConcurrentExecutions)\n.request($where[0] ; $what[2] ; $when[0] ; $window[0]).as($duration;Unit='milliseconds')\n.request($where[0] ; $what[3] ; $when[0] ; $window[0]).as($errors;Unit='count')\n.request($where[0] ; $what[4] ; $when[0] ; $window[0]).as($throttles;Unit='count')\n.request($where[0] ; $what[5] ; $when[0] ; $window[0]).as($invocations;Unit='count')\n.request($where[0] ; $what[6] ; $when[0] ; $window[0]).as($concurrent_executions;Unit='count')\n\n.average($errors).as($errors_avg).sort($errors_avg;0).as($sorted_errors).head($sorted_errors;10)\n            .as($top10_errors;Decription='Average over entire period';Stat='!')\n.average($invocations).as($invocations_avg).sort($invocations_avg;0).as($sorted_invocations).head($sorted_invocations;10)\n            .as($top10_invocations;Decription='Average over entire period';Stat='!')\n.average($duration).as($duration_avg).sort($duration_avg;0).as($sorted_duration).head($sorted_duration;10)\n            .as($top10_duration;Decription='Average over entire period';Stat='!')\n.average($throttles).as($throttles_avg).sort($throttles_avg;0).as($sorted_throttles).head($sorted_throttles;10)\n            .as($top10_throttles;Decription='Average over entire period';Stat='!')\n\n.chart($top10_invocations;@piestack)\n.chart($top10_errors;@piestack)\n.chart($top10_duration;@piestack)\n.chart($top10_throttles;@piestack)\n.chart($ClaimedAccountConcurrency;$UnreservedConcurrentExecutions;@barstack)\n\n.chart($invocations;@barstack)\n.chart($duration;@barstack)\n.chart($errors;@barstack)\n.chart($throttles;@line)\n.chart($concurrent_executions;@line)",
        "model": "pql:latest",
        "temperature": 0.15
    }
]

